/*************************Jay Shree Ram***********************

    Following is the representation of the Singly Linked List Node:

    class node{
        public:
            int data;
            node * next;
            node(int data){
                this->data=data;
                this->next=NULL;
            }
    };
    
********************************************************************/
node* getMid(node* head){
    node* slow = head;
    node* fast = head->next;

    while(fast !=  NULL && fast->next != NULL){
        fast = fast->next->next;
        slow = slow->next;
    }
    return slow;
}

node *merge(node *left, node *right) {
  if (left == NULL)
    return right;

  if (right == NULL)
    return left;

  node *ans = new node(-1);
  node *tail = ans;
  while (left != NULL && right != NULL){
      if(left->data < right->data){
          tail->next = left;
          tail = left;
          left = left->next;
      }
      else{
          tail->next = right;
          tail = right;
          right = right->next;
      }
  }
  while(left != NULL){
      tail->next = left;
          tail = left;
          left = left->next;
  }
  while(right != NULL){
       tail->next = right;
          tail = right;
          right = right->next;
  }
  ans = ans->next;
  return ans;
}
node* mergeSort(node *head) {
    // Write your code here.
    if(head == NULL || head->next == NULL)
    return head;

    node* mid = getMid(head);

    node* left = head;
    node* right = mid->next;
    mid->next = NULL;

    left = mergeSort(left);
    right = mergeSort(right);

    node* result = merge(left, right);

    return result;
}
TC =O(n log n)
SC = O(n log n)
