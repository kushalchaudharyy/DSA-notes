creating new linked list
class Solution {
    private:
    void insertionAtLast(ListNode* &head,ListNode* &tail,int data){
        ListNode* temp = new ListNode(data);
        if(head == NULL){
            head = temp;
            tail = temp;
            return;
        }
        tail->next = temp;
        tail = temp;
        return;
    }
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* head = NULL;
        ListNode* tail = NULL;
        while(list1 != NULL && list2 != NULL){
            if(list1->val < list2 -> val){
                insertionAtLast(head, tail, list1->val);
                list1 = list1->next;
            }
            else{
                insertionAtLast(head, tail, list2->val);
                list2 = list2->next;;
            }
        }
        while(list1 != NULL){
             insertionAtLast(head, tail, list1->val);
                list1 = list1->next;
        }
         while(list2 != NULL){
             insertionAtLast(head, tail, list2->val);
                list2 = list2->next;
        }
        return head;
    }
};
TC= O(M+N)
SC = O(M+N)

void ins(Node<int>* &head, Node<int>* &box,Node<int>* &temp){
    int value = box->data;
    
    while (temp->next != NULL && temp->next->data < value ) 
      temp = temp->next;
    
    
    
    box->next = temp->next;
    temp->next = box;
    //temp = temp->next;

    return;
}
Node<int>* sortTwoLists(Node<int>* first, Node<int>* second)
{
    // Write your code here.
    if(first == NULL)
    return second;
    if(second == NULL)
    return first;
    if(first->data > second->data){
        Node<int> * forSwap = second;
        second = first;
        first = forSwap;
    }
    Node<int>* temp = second;
    Node<int>* forward = NULL;
    Node<int>* current = first;
    while(temp != NULL){
        forward = temp->next;
        ins(first, temp,current);
        temp = forward;
        //delete cn;
    }
     
    return first;
}

TC = O(m+n)
SC = O(1)
